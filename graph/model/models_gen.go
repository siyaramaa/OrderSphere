// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type LoginAccountDetails interface {
	IsLoginAccountDetails()
}

type AccountQueryInput struct {
	AccountID    *string `json:"account_id,omitempty"`
	AccountEmail *string `json:"account_email,omitempty"`
}

type BusinessAccount struct {
	ID              string `json:"id"`
	AccountName     string `json:"accountName"`
	AccountEmail    string `json:"accountEmail"`
	AccountPassword string `json:"accountPassword"`
	AccountContact  string `json:"accountContact"`
	AccountAddress  string `json:"accountAddress"`
	CreatedAt       string `json:"createdAt"`
}

func (BusinessAccount) IsLoginAccountDetails() {}

type BusinessCustomer struct {
	ID                string `json:"id"`
	BusinessAccountID string `json:"businessAccountId"`
	CustomerAccountID string `json:"customerAccountId"`
	JoinedDate        string `json:"joinedDate"`
}

type CustomOrderSchema struct {
	ID         string           `json:"id"`
	BusinessID string           `json:"business_id"`
	Fields     CustomFieldArray `json:"fields" gorm:"type:jsonb"`
}

type CustomOrderSchemaInput struct {
	BusinessID string           `json:"business_id"`
	Fields     CustomFieldArray `json:"fields" gorm:"type:jsonb"`
}

type CustomerAccount struct {
	ID              string `json:"id"`
	AccountName     string `json:"accountName"`
	AccountEmail    string `json:"accountEmail"`
	AccountPassword string `json:"accountPassword"`
	AccountContact  string `json:"accountContact"`
	AccountAddress  string `json:"accountAddress"`
	CreatedAt       string `json:"createdAt"`
}

func (CustomerAccount) IsLoginAccountDetails() {}

type LinkAccountToBusinessInput struct {
	BusinessID string `json:"business_id"`
	CustomerID string `json:"customer_id"`
}

type LoginDetailsInput struct {
	AccountEmail    string `json:"accountEmail"`
	AccountPassword string `json:"accountPassword"`
}

type LoginResponse struct {
	AccessToken    string              `json:"accessToken"`
	AccountDetails LoginAccountDetails `json:"accountDetails"`
}

type Mutation struct {
}

type NewBusinessAccountInput struct {
	AccountName     string `json:"accountName"`
	AccountEmail    string `json:"accountEmail"`
	AccountPassword string `json:"accountPassword"`
	AccountContact  string `json:"accountContact"`
	AccountAddress  string `json:"accountAddress"`
}

type NewCustomerAccountInput struct {
	AccountName       string  `json:"accountName"`
	AccountEmail      string  `json:"accountEmail"`
	AccountPassword   string  `json:"accountPassword"`
	AccountContact    string  `json:"accountContact"`
	AccountAddress    string  `json:"accountAddress"`
	BusinessAccountID *string `json:"businessAccountId,omitempty"`
}

type NewOrderInput struct {
	ProductName            string            `json:"productName"`
	ProductURL             *string           `json:"productUrl,omitempty"`
	ProductPrice           float64           `json:"productPrice"`
	ProductPriceCurrency   string            `json:"productPriceCurrency"`
	ProductDescription     string            `json:"productDescription"`
	OrderedByCustomerEmail string            `json:"orderedByCustomerEmail"`
	BusinessID             string            `json:"business_id"`
	OrderDeadline          string            `json:"orderDeadline"`
	OrderPlacedDate        *string           `json:"orderPlacedDate,omitempty"`
	OrderStatus            *OrderStatusTypes `json:"orderStatus,omitempty"`
	CustomFieldsData       CustomFieldJSON   `json:"CustomFieldsData,omitempty" gorm:"type:jsonb"`
}

type Order struct {
	ID                     string          `json:"id"`
	ProductName            string          `json:"productName"`
	ProductURL             string          `json:"productUrl"`
	ProductPrice           float64         `json:"productPrice"`
	ProductPriceCurrency   string          `json:"productPriceCurrency"`
	ProductDescription     string          `json:"productDescription"`
	OrderedByCustomerEmail string          `json:"orderedByCustomerEmail"`
	BusinessID             string          `json:"business_id"`
	OrderDeadline          string          `json:"orderDeadline"`
	OrderPlacedDate        string          `json:"orderPlacedDate"`
	OrderStatus            string          `json:"orderStatus"`
	CustomFieldsData       CustomFieldJSON `json:"CustomFieldsData,omitempty" gorm:"type:jsonb"`
}

type OrderQueryInput struct {
	BusinessID    *string `json:"business_id,omitempty"`
	CustomerEmail *string `json:"customer_email,omitempty"`
}

type Query struct {
}

type UpdateOrderInput struct {
	ID                     string            `json:"id"`
	ProductName            *string           `json:"productName,omitempty"`
	ProductURL             *string           `json:"productUrl,omitempty"`
	ProductPrice           *float64          `json:"productPrice,omitempty"`
	ProductPriceCurrency   *string           `json:"productPriceCurrency,omitempty"`
	ProductDescription     *string           `json:"productDescription,omitempty"`
	OrderedByCustomerEmail *string           `json:"orderedByCustomerEmail,omitempty"`
	OrderDeadline          *string           `json:"orderDeadline,omitempty"`
	OrderPlacedDate        *string           `json:"orderPlacedDate,omitempty"`
	OrderStatus            *OrderStatusTypes `json:"orderStatus,omitempty"`
	CustomFieldsData       CustomFieldJSON   `json:"CustomFieldsData,omitempty" gorm:"type:jsonb"`
}

type OrderStatusTypes string

const (
	OrderStatusTypesPending          OrderStatusTypes = "PENDING"
	OrderStatusTypesReadyToBeShipped OrderStatusTypes = "READY_TO_BE_SHIPPED"
	OrderStatusTypesShipped          OrderStatusTypes = "SHIPPED"
	OrderStatusTypesDelivered        OrderStatusTypes = "DELIVERED"
)

var AllOrderStatusTypes = []OrderStatusTypes{
	OrderStatusTypesPending,
	OrderStatusTypesReadyToBeShipped,
	OrderStatusTypesShipped,
	OrderStatusTypesDelivered,
}

func (e OrderStatusTypes) IsValid() bool {
	switch e {
	case OrderStatusTypesPending, OrderStatusTypesReadyToBeShipped, OrderStatusTypesShipped, OrderStatusTypesDelivered:
		return true
	}
	return false
}

func (e OrderStatusTypes) String() string {
	return string(e)
}

func (e *OrderStatusTypes) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatusTypes(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatusTypes", str)
	}
	return nil
}

func (e OrderStatusTypes) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
