package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"github.com/siyaramsujan/graphql-api/graph/model"
)

// CreateBusinessAcount is the resolver for the createBusinessAcount field.
func (r *mutationResolver) CreateBusinessAcount(ctx context.Context, input model.NewBusinessAccountInput) (*model.BusinessAccount, error) {
	return r.AccountService.CreateBusinessAccount(input)
}

// CreateCustomerAccount is the resolver for the createCustomerAccount field.
func (r *mutationResolver) CreateCustomerAccount(ctx context.Context, input model.NewCustomerAccountInput) (*model.CustomerAccount, error) {
	return r.AccountService.CreateCustomerAccount(input)
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.NewOrderInput) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: CreateOrder - createOrder"))
}

// LoginAsCustomer is the resolver for the loginAsCustomer field.
func (r *mutationResolver) LoginAsCustomer(ctx context.Context, input model.LoginDetailsInput) (*model.LoginResponse, error) {
	return r.AccountService.LoginAsCustomer(input)
}

// LoginAsBusiness is the resolver for the loginAsBusiness field.
func (r *mutationResolver) LoginAsBusiness(ctx context.Context, input model.LoginDetailsInput) (*model.LoginResponse, error) {
	return r.AccountService.LoginAsBusiness(input)
}

// DeleteCustomerAccount is the resolver for the deleteCustomerAccount field.
func (r *mutationResolver) DeleteCustomerAccount(ctx context.Context, input model.LoginDetailsInput) (string, error) {
	return r.AccountService.DeleteCustomerAccount(input)
}

// DeleteBusinessAccount is the resolver for the deleteBusinessAccount field.
func (r *mutationResolver) DeleteBusinessAccount(ctx context.Context, input model.LoginDetailsInput) (string, error) {
	return r.AccountService.DeleteBusinessAccount(input)
}

// LinkAccountToBusiness is the resolver for the linkAccountToBusiness field.
func (r *mutationResolver) LinkAccountToBusiness(ctx context.Context, input *model.LinkAccountToBusinessInput) (string, error) {
    return r.AccountService.LinkAccountToBusiness(*input)
}

// GetBusinessAccounts is the resolver for the getBusinessAccounts field.
func (r *queryResolver) GetBusinessAccounts(ctx context.Context) ([]*model.BusinessAccount, error) {
	return r.AccountService.GetListOfBusinessAccounts()
}

// GetCustomerAccounts is the resolver for the getCustomerAccounts field.
func (r *queryResolver) GetCustomerAccounts(ctx context.Context) ([]*model.CustomerAccount, error) {
	return r.AccountService.GetListOfCustomerAccounts()
}

// GetCustomersByBusinessID is the resolver for the getCustomersByBusinessId field.
func (r *queryResolver) GetCustomersByBusinessID(ctx context.Context, businessID string) ([]*model.BusinessCustomer, error) {
	return r.AccountService.GetListOfBusinessCustomers(businessID)
}

// GetCustomerByIDOrEmail is the resolver for the getCustomerByIdOrEmail field.
func (r *queryResolver) GetCustomerByIDOrEmail(ctx context.Context, input model.AccountQueryInput) (*model.CustomerAccount, error) {
	return r.AccountService.GetCustomerByIdOrEmail(input)
}

// GetBusinessByIDOrEmail is the resolver for the getBusinessByIdOrEmail field.
func (r *queryResolver) GetBusinessByIDOrEmail(ctx context.Context, input model.AccountQueryInput) (*model.BusinessAccount, error) {
	return r.AccountService.GetBusinessByIdOrEmail(input)
}

// GetOrders is the resolver for the getOrders field.
func (r *queryResolver) GetOrders(ctx context.Context, input *model.OrderQueryInput) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: GetOrders - getOrders"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
